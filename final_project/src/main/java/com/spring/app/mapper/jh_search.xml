<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== #29. mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- ==== #29. 루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체내에서 유일해야 한다.) ==== -->
<mapper namespace="jh_search">
	
	<!-- 검색어가 있는 경우에 따라 숙소리스트를 뽑아주기 -->
	<resultMap type="HashMap" id="lodgeListMap">
	    <result property="lodge_id" 	column="lodge_id" 	javaType="String" />
	    <result property="lg_name" 		column="lg_name" 	javaType="String" />
	    <result property="lg_area_2" 	column="lg_area_2" 	javaType="String" />
	    <result property="lg_area" 		column="lg_area" 	javaType="String" />
	</resultMap>
	<select id="getLodgeList" parameterType="HashMap" resultMap="lodgeListMap">
		select lodge_id, lg_name, lg_area_2, lg_area
		from
		(
	    <if test='sort == "Recommended"'>
			select L.lodge_id, L.lg_name, L.lg_area_2, L.lg_area, L.lg_hotel_star, L.fk_lodge_type
			from
			(
			    select lodge_id, min_price, nvl(resv_cnt, 0) as resv_cnt
			    from
			        (select lodge_id, MIN(rm_price) AS min_price from tbl_lodge L join tbl_room R on L.lodge_id = R.fk_lodge_id group by lodge_id)
			    C
			    left join (select fk_lodge_id, count(*) AS resv_cnt from tbl_review group by fk_lodge_id) V
			    on C.lodge_id = V.fk_lodge_id
			) P
			left join tbl_lodge L
			on P.lodge_id = L.lodge_id
			order by resv_cnt desc, lg_hotel_star desc, min_price asc
	    </if>
	    <if test='sort == "LowToHigh"'>
			select L.lodge_id, L.lg_name, L.lg_area_2, L.lg_area, L.lg_hotel_star, L.fk_lodge_type
			from
			(
			    select lodge_id, MIN(rm_price) AS min_price, AVG(fk_rv_rating) AS avg_rating
			    from
			        (select * from tbl_lodge L join tbl_room R on L.lodge_id = R.fk_lodge_id)
			    C
			    left join tbl_review V
			    on C.lodge_id = V.fk_lodge_id
			    group by lodge_id
			) P
			join tbl_lodge L
			on P.lodge_id = L.lodge_id
			order by min_price asc
	    </if>
	    <if test='sort == "HighToLow"'>
			select L.lodge_id, L.lg_name, L.lg_area_2, L.lg_area, L.lg_hotel_star, L.fk_lodge_type
			from
			(
			    select lodge_id, MAX(rm_price) AS max_price, AVG(fk_rv_rating) AS avg_rating
			    from
			        (select * from tbl_lodge L join tbl_room R on L.lodge_id = R.fk_lodge_id)
			    C
			    left join tbl_review V
			    on C.lodge_id = V.fk_lodge_id
			    group by lodge_id
			) P
			join tbl_lodge L
			on P.lodge_id = L.lodge_id
			order by max_price desc
	    </if>
	    <if test='sort == "ReviewRating"'>
			select L.lodge_id, L.lg_name, L.lg_area_2, L.lg_area, L.lg_hotel_star, L.fk_lodge_type
			from
			(
			    select lodge_id, MIN(rm_price) AS min_price, AVG(fk_rv_rating) AS avg_rating
			    from
			        (select * from tbl_lodge L join tbl_room R on L.lodge_id = R.fk_lodge_id)
			    C
			    left join tbl_review V
			    on C.lodge_id = V.fk_lodge_id
			    group by lodge_id
			) P
			join tbl_lodge L
			on P.lodge_id = L.lodge_id
			order by avg_rating desc
	    </if>
		)
		where 1 = 1
		<choose>
		   <when test='lg_name != ""'>
		      and lg_name = #{lg_name}
		   </when>
		   <when test='lg_area_2 != ""'>
		      and lg_area_2 = #{lg_area_2}
		   </when>
		   <when test='lg_area != ""'>
		      and lg_area = #{lg_area}
		   </when>
		   <otherwise>
		   </otherwise>
		</choose>
		<if test="lg_star_arr.length != 0">
	     	and lg_hotel_star in
	        <foreach collection="lg_star_arr" index="i" open="(" separator="," close=")">
	            '${lg_star_arr[i]}'
	        </foreach>
	    </if>
		<if test="lodge_type_arr.length != 0">
	     	and fk_lodge_type in
	        <foreach collection="lodge_type_arr" index="i" open="(" separator="," close=")">
	            '${lodge_type_arr[i]}'
	        </foreach>
	    </if>
	</select>
	
	
	<!-- map에 저장한 하나의 숙소에 지정일에 예약가능한 객실수와 lodge_id를 jsonObj_2에 저장하기 -->
	<resultMap type="HashMap" id="availableLodgeMap">
	    <result property="fk_lodge_id" 		column="fk_lodge_id" 	javaType="String" />
	    <result property="rest_room_cnt" 	column="rest_room_cnt" 	javaType="String" />
	</resultMap>
	<select id="getAvailableLodgeList" parameterType="HashMap" resultMap="availableLodgeMap">
		SELECT fk_lodge_id, sum(rest_room_cnt) AS rest_room_cnt
		FROM
		(
		    select fk_lodge_id, rm_seq, rm_type, rm_cnt, nvl(rs_room_cnt, 0) AS rs_room_cnt
		         , to_number(rm_cnt) - to_number(nvl(rs_room_cnt, 0)) AS rest_room_cnt
		    from
		    (
		        select fk_lodge_id, rm_seq, rm_type, rm_cnt
		        from tbl_room
		        where fk_lodge_id = #{lodge_id}
        		and to_number(rm_guest_cnt) >= to_number(#{travlers})
		    ) A
		    left join 
		    (
		        select fk_rm_seq, count(*) as rs_room_cnt
		        from
		        (   
		            select L.lodge_id, L.fk_h_userid, R.rs_name, R.rs_checkindate, R.rs_checkoutdate, R.fk_rm_seq
		            from tbl_reservation R join tbl_lodge L
		            on R.fk_h_userid = L.fk_h_userid
		            where L.lodge_id = #{lodge_id}
		            order by R.rs_checkindate, R.rs_checkoutdate
		        )
		        where (rs_checkindate <![CDATA[ <= ]]> to_date(#{check_in}, 'yy/mm/dd')) and ((to_date(#{check_in}, 'yy/mm/dd') <![CDATA[ < ]]> rs_checkoutdate) and (rs_checkoutdate <![CDATA[ <= ]]> to_date(#{check_out}, 'yy/mm/dd')))
		            or ((to_date(#{check_in}, 'yy/mm/dd') <![CDATA[ <= ]]> rs_checkindate) and ((rs_checkindate <![CDATA[ <= ]]> to_date(#{check_out}, 'yy/mm/dd')) and (to_date(#{check_out}, 'yy/mm/dd') <![CDATA[ <= ]]> rs_checkoutdate)))
		            or ((rs_checkindate <![CDATA[ <= ]]> to_date(#{check_in}, 'yy/mm/dd')) and (to_date(#{check_out}, 'yy/mm/dd') <![CDATA[ <= ]]> rs_checkoutdate))
		            or ((to_date(#{check_in}, 'yy/mm/dd') <![CDATA[ <= ]]> rs_checkindate) and (rs_checkoutdate <![CDATA[ <= ]]> to_date(#{check_out}, 'yy/mm/dd')))
		            group by fk_rm_seq
		    ) B
		    on A.rm_seq = B.fk_rm_seq
		)
		GROUP BY fk_lodge_id
	</select>
	
	
	<!-- 캐러셀에 넣어줄 이미지 가져오기 -->
	<resultMap type="HashMap" id="lodgeImgMap">
	    <result property="fk_lodge_id" 			column="fk_lodge_id" 		javaType="String" />
	    <result property="lg_img_save_name" 	column="lg_img_save_name" 	javaType="String" />
	</resultMap>
	<select id="lodgeImgList" resultMap="lodgeImgMap">
		select fk_lodge_id, lg_img_save_name
		from tbl_lg_img
		where fk_img_cano = '6'
		order by lg_img_save_name asc
	</select>
	
	
	<!-- 예약가능한 숙박시설 정보 -->
	<resultMap type="HashMap" id="getLodgeInfoMap">
	    <result property="lodge_id" 		column="lodge_id" 		javaType="String" />
	    <result property="lg_name" 			column="lg_name" 		javaType="String" />
	    <result property="lg_area_2" 		column="lg_area_2" 		javaType="String" />
	    <result property="lg_area" 			column="lg_area" 		javaType="String" />
	    <result property="fk_cancel_opt" 	column="fk_cancel_opt" 	javaType="String" />
	    <result property="rm_price" 		column="rm_price" 		javaType="String" />
	    <result property="rm_price" 		column="rm_price" 		javaType="String" />
	    <result property="rating" 			column="rating" 		javaType="String" />
	    <result property="review_cnt" 		column="review_cnt" 		javaType="String" />
	</resultMap>
	<select id="getLodgeInfoList" parameterType="HashMap" resultMap="getLodgeInfoMap">
		select lodge_id, lg_name, lg_area_2, lg_area, fk_cancel_opt, rm_price, rating, review_cnt
		from
		(
		    select fk_lodge_id, rm_seq, rm_type, rm_cnt, nvl(rs_room_cnt, 0) AS rs_room_cnt
		         , to_number(rm_cnt) - to_number(nvl(rs_room_cnt, 0)) AS rest_room_cnt
         		 , rating, review_cnt
		    from
		    (
		        select R.fk_lodge_id, rm_seq, rm_type, rm_cnt, V.rating, V.review_cnt
		        from
		        (
		            select *
		            from tbl_room
		            where fk_lodge_id = #{lodge_id}
		        ) R
		        join
		        (
		            select fk_lodge_id, round(avg(fk_rv_rating), 1) as rating, count(*) AS review_cnt
		            from tbl_review 
		            group by fk_lodge_ID
		        ) V
		        on R.fk_lodge_id = V.fk_lodge_id
		    ) A
		    left join 
		    (
		        select fk_rm_seq, count(*) as rs_room_cnt
		        from
		        (   
		            select L.lodge_id, L.fk_h_userid, R.rs_name, R.rs_checkindate, R.rs_checkoutdate, R.fk_rm_seq
		            from tbl_reservation R join tbl_lodge L
		            on R.fk_h_userid = L.fk_h_userid
		            where L.lodge_id = #{lodge_id}
		            order by R.rs_checkindate, R.rs_checkoutdate
		        )
		        where (rs_checkindate <![CDATA[ <= ]]> to_date(#{check_in})) and ((to_date(#{check_in}) <![CDATA[ < ]]> rs_checkoutdate) and (rs_checkoutdate <![CDATA[ <= ]]> to_date(#{check_out})))
		            or ((to_date(#{check_in}) <![CDATA[ <= ]]> rs_checkindate) and ((rs_checkindate <![CDATA[ <= ]]> to_date(#{check_out})) and (to_date(#{check_out}) <![CDATA[ <= ]]> rs_checkoutdate)))
		            or ((rs_checkindate <![CDATA[ <= ]]> to_date(#{check_in})) and (to_date(#{check_out}) <![CDATA[ <= ]]> rs_checkoutdate))
		            or ((to_date(#{check_in}) <![CDATA[ <= ]]> rs_checkindate) and (rs_checkoutdate <![CDATA[ <= ]]> to_date(#{check_out})))
		        group by fk_rm_seq
		    ) B
		    on A.rm_seq = B.fk_rm_seq
		) V
		LEFT JOIN
		(
		    select L.lodge_id, L.lg_name, L.lg_area, L.lg_area_2, rm_price, rm_seq
           		 , decode(fk_cancel_opt, '0', decode(SIGN(ceil(to_date(#{check_in}) - sysdate) - 3), 1, '전액 환불 가능', ' ')
                               		   , '1', decode(SIGN(ceil(to_date(#{check_in}) - sysdate) - 2), 1, '전액 환불 가능', ' ')
                               		   , '2', decode(SIGN(ceil(to_date(#{check_in}) - sysdate) - 1), 1, '전액 환불 가능', ' ')
                               		   , '3', decode(SIGN(ceil(to_date(#{check_in}) - sysdate) - 0), 1, '전액 환불 가능', ' ')) AS fk_cancel_opt
		    from tbl_lodge L
		    join tbl_room R
		    on L.lodge_id = R.fk_lodge_id
		    where L.lodge_id = #{lodge_id}
		    <if test='breakfast == "on"'>
		    	and lg_breakfast_yn = '1'
		    </if>
		    <if test='pool == "on"'>
		    	and lg_pool_yn = '1'
		    </if>
		    <if test='wifi == "on"'>
		    	and lg_internet_yn = '1'
		    </if>
		    <if test='seaView == "on"'>
		    	and lg_beach_yn = '1'
		    </if>
		    <if test='pet == "on"'>
		    	and lg_pet_yn = '1'
		    </if>
		    <if test='spa == "on"'>
		    	and fk_spa_type = '1'
		    </if>
		    <if test='parking == "on"'>
		    	and lg_park_yn = '1'
		    </if>
		    <if test='restaurant == "on"'>
		    	and (lg_dining_place_yn = '1'
		    		 and '1' = (select count(*) from tbl_din where fk_lodge_id = #{lodge_id} and fk_din_opt_no = '0'))
		    </if>
		    <if test='babyBed == "on"'>
		    	and (lg_fa_travel_yn = '1'
		    		 and '1' = (select count(*) from tbl_fasvc where fk_lodge_id = #{lodge_id} and fk_fasvc_opt_no = '5'))
		    </if>
		    <if test='washerDryer == "on"'>
		    	and (lg_service_yn = '1'
		    		 and '1' = (select count(*) from tbl_cs where fk_lodge_id = #{lodge_id} and fk_cs_opt_no = '3'))
		    </if>
		    <if test='kitchen == "on"'>
		    	and rm_kitchen_yn = '1'
		    </if>
		    <if test='aircon == "on"'>
		    	and (rm_tmp_ctrl_yn = '1'
		    		 and 1 <![CDATA[ <= ]]> (select count(*) from (select * from tbl_tmp T join tbl_room R on T.fk_rm_seq = R.rm_seq) where fk_lodge_id = #{lodge_id} and fk_tmp_opt_no = '0' group by fk_lodge_id))
		    </if>
		    <if test='rating != ""'>
		    	and #{rating} <![CDATA[ <= ]]> (select avg(fk_rv_rating) from tbl_review where fk_lodge_id =#{lodge_id} group by fk_lodge_id)
		    </if>
		) D
		ON V.rm_seq = D.rm_seq
		WHERE rest_room_cnt > 0
		AND rm_price = 
		( 
		    select MIN(to_number(rm_price)) AS rm_price
		    from
		    (
		        select fk_lodge_id, rm_seq, rm_type, rm_cnt, nvl(rs_room_cnt, 0) AS rs_room_cnt
		             , to_number(rm_cnt) - to_number(nvl(rs_room_cnt, 0)) AS rest_room_cnt
		        from
		        (
		            select fk_lodge_id, rm_seq, rm_type, rm_cnt
		            from tbl_room
		            where fk_lodge_id = #{lodge_id}
		        ) A
		        left join 
		        (
		            select fk_rm_seq, count(*) as rs_room_cnt
		            from
		            (   
		                select L.lodge_id, L.fk_h_userid, R.rs_name, R.rs_checkindate, R.rs_checkoutdate, R.fk_rm_seq
		                from tbl_reservation R join tbl_lodge L
		                on R.fk_h_userid = L.fk_h_userid
		                where L.lodge_id = #{lodge_id}
		                order by R.rs_checkindate, R.rs_checkoutdate
		            )
		            where (rs_checkindate <![CDATA[ <= ]]> to_date(#{check_in})) and ((to_date(#{check_in}) <![CDATA[ < ]]> rs_checkoutdate) and (rs_checkoutdate <![CDATA[ <= ]]> to_date(#{check_out})))
		                or ((to_date(#{check_in}) <![CDATA[ <= ]]> rs_checkindate) and ((rs_checkindate <![CDATA[ <= ]]> to_date(#{check_out})) and (to_date(#{check_out}) <![CDATA[ <= ]]> rs_checkoutdate)))
		                or ((rs_checkindate <![CDATA[ <= ]]> to_date(#{check_in})) and (to_date(#{check_out}) <![CDATA[ <= ]]> rs_checkoutdate))
		                or ((to_date(#{check_in}) <![CDATA[ <= ]]> rs_checkindate) and (rs_checkoutdate <![CDATA[ <= ]]> to_date(#{check_out})))
		            group by fk_rm_seq
		        ) B
		        on A.rm_seq = B.fk_rm_seq
		    ) V
		    LEFT JOIN
		    (
		        select L.lodge_id, L.lg_name, L.lg_area, L.lg_area_2, rm_price, rm_seq
		        from tbl_lodge L
		        join tbl_room R
		        on L.lodge_id = R.fk_lodge_id
		        where L.lodge_id = #{lodge_id}
		    ) D
		    ON V.rm_seq = D.rm_seq
		    WHERE rest_room_cnt > 0
		    <if test='price_min != ""'>
		    AND to_number(#{price_min}) <![CDATA[ <= ]]> to_number(rm_price)
		    </if>
		    <if test='price_max != ""'>
		    AND to_number(rm_price) <![CDATA[ <= ]]> to_number(#{price_max})
		    </if>
		)
	</select>
	
	
	<!-- 검색된 내용을 통해 호텔 최저, 최고가 검색 -->
	<resultMap type="HashMap" id="LodgePriceMap">
	    <result property="max_price" 	column="max_price" 	javaType="String" />
	    <result property="min_price" 	column="min_price" 	javaType="String" />
	</resultMap>
	<select id="getLodgePrice" parameterType="HashMap" resultMap="LodgePriceMap">
		SELECT nvl(MAX(max_price), 0) AS max_price, nvl(MIN(min_price), 0) AS min_price
		FROM
		(
		    select lodge_id, lg_name, max_price, min_price
		    from
		    (
		        select lodge_id, lg_name
		        from tbl_lodge
		        where 1 = 1
		        <choose>
				   <when test='lg_name != ""'>
				      and lg_name = #{lg_name}
				   </when>
				   <when test='lg_area_2 != ""'>
				      and lg_area_2 = #{lg_area_2}
				   </when>
				   <when test='lg_area != ""'>
				      and lg_area = #{lg_area}
				   </when>
				   <otherwise>
				   </otherwise>
				</choose>
		    ) L
		    left join 
		    (
		        select fk_lodge_id, max(rm_price) AS max_price, min(rm_price) AS min_price
		        from tbl_room 
		        group by fk_lodge_id
		    ) R
		    on L.lodge_id = R.fk_lodge_id
		)
	</select>
	
	
	<!-- 검색된 내용 insert 해주기 -->
	<insert id="insertSearchLog" parameterType="HashMap">
		insert into tbl_search_log(search_seq, search_text, search_date)
		values(seq_tbl_search_log.nextval,
		<choose>
			<when test='lg_name != ""'>
				#{lg_name}
			</when>
			<when test='lg_area_2 != ""'>
				#{lg_area_2}
			</when>
			<otherwise>
				#{lg_area}	
			</otherwise>
		</choose>
		, default)
	</insert>
	
	
	<!-- 위시리스트에 넣은 lodge_id 리스트 가져오기 -->
	<resultMap type="HashMap" id="lodgeIdMap">
	    <result property="fk_lodge_id" 	column="fk_lodge_id" 	javaType="String" />
	</resultMap>
	<select id="lodgeIdList" parameterType="HashMap" resultMap="lodgeIdMap">
		select fk_lodge_id
		from tbl_wishlist
		where fk_userid = #{userid}
	</select>
	
	
	<!-- 위시리스트에 추가하기 -->
	<insert id="addWishlist" parameterType="HashMap">
		insert into tbl_wishlist(wishlist_seq, fk_lodge_id, fk_userid)
		values(seq_tbl_wishlist.nextval, #{wishlist_lodge_id}, #{userid})
	</insert>
	
	
	<!-- 위시리스트에 삭제하기 -->
	<delete id="deleteWishlist" parameterType="HashMap">
		delete from tbl_wishlist
		where fk_lodge_id = #{wishlist_lodge_id}
		and fk_userid = #{userid}
	</delete>
	
	
</mapper>
